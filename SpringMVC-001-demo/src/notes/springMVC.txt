1. 什么是MVC?
   - 它是一种开发模式,它是模型视图控制器的简称.所有有的web应用都是基于MVC开发
   - M:模型层,包含实体类,业务逻辑层,数据访问层
   - V:视图层,html,javascript,vue等都是视图层,用来显现数据
   - C:控制器,它是用来接收客户端的请求,并返回响应到客户端的组件,Servlet就是组件
2. SpringMVC框架的优点
   1. 轻量级,基于MVC的框架
   2. 易于上手,容易理解,功能强大
   3. 它具备IOC和AOP
   4. 完全基于注解开发
3. 基于注解的SpringMVC框架开发的步骤
   1. 新建项目,选择webapp模板.
   2. 修改目录,添加缺失的test,java,resources(两套),并修改目录属性
   3. 修改pom.xml文件,添加SpringMVC的依赖,添加Servlet的依赖
   4. 添加springmvc.xml配置文件,指定包扫描,添加视图解析器暴.
   5. 删除web.xml文件,新建web.xml
   6. 在web.xml文件中注册springMVC框架(所有的web请求都是基于servlet的)
   7. 在webapp目录下新建admin目录,在admin目录下新建main.jsp页面,删除index.jsp页面,并新建,发送请求给服务器
   8. 开发控制器(Servlet),它是一个普通的类.
   9. 添加tomcat进行测试功能
4. web请求执行的流程
   - 核心处理器
   - index.jsp<------->DispatcherServlet<--------->SpringMVC的处理器是一个普通的方法
   - one.jsp<------->DispatcherServlet<--------->SpringMVC的处理器是一个普通的方法
   - DispatcherServlet要在web.xml文件中注册才可用.
5. @RequestMapping注解详解
   此注解就是来映射服务器访问的路径.
   1)此注解可加在方法上,是为此方法注册一个可以访问的名称(路径)
   @RequestMapping("/demo")
   public String demo(){
        System.out.println("服务器被访问到了.......");
        return"main";//可以直接跳到/admin/main.jsp页上
   }
   <a href="${pageContext.request.contextPath}/demo.action">访问服务器</a>

   2)此注解可以加在类上,相当于是包名(虚拟路径),分不同类中相同的action的名称
   @RequestMapping("/user")
   public class DemoAction {}
   <a href="${pageContext.request.contextPath}/user/demo.action">访问服务器</a>

   3)此注解可区分get请求和post请求
   @Controller
   public class ReqAction {
       RequestMapping (value = "/req",method = RequestMMethod.GET)
       public String req(){
           System.out.println("我是处理get请求的........");
           return "main";
       }
       @RequestMapping(value = "/req" ,method = RequestMethod.POST
       public String reql(){
           System.out.println("我是处理post请求的........");
           return "main";
       }
   }

6. 五种数据提交方式的优化
    1. 单个数据散提交
    2. 对象封装提交：数据在提交请求中,保证请求参数的名称与实体类中成员变量的的名称一致,则可以自动提交数据,自动类型转换,自动封装数据到对象中.
    3. 动态占位符提交：仅限于超链接或地址拦提交数据.它是一杠一值,一杠-一大括号,使用注解来解析.
    4. 映射名称不一致：提交请求参数与action方法的形参的名称不一致,使用注解@RequestParam来解析
    5. 手工提取数据

7. action方法的返回值
   1)String:客户端资源的地址,自动拼接前缀和后缀.还可以屏蔽自动拼接字符串,可以指定返回的路径
   2)Object:返回json格式的对象.自动将对象或集合转为jscon.使用的jackson工具进行转换,必须要添加jackson依赖.一般用于ajax请求.
   3)void:无返回值,一般用于ajax请求.
   4)基本数据类型,用于ajax请求.






   

